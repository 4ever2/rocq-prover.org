let render () =
Layout.render
~title:"Why Rocq?"
~description:"Rocq is a mature, dependently-typed functional programming language and interactive theorem prover. Learn more about its rich history and what makes it unique."
~canonical:Url.about @@
<div class="lg:-mt-32 lg:pt-44 intro-section-simple dark:dark-intro-section-simple">
  <div class="container-fluid">
    <div class="text-center w-full lg:w-2/3 m-auto">
      <h1 class="font-bold mb-6 text-title dark:text-dark-title">Why Rocq?</h1>
      <div class="flex items-center justify-center space-x-8 mt-11 lg:space-x-24">
        <div>
          <a
            class="hover:text-primary dark:hover:text-dark-primary hover:bg-primary_25 dark:hover:bg-dark-primary_20 rounded-lg h-28 w-28 inline-block transition-colors"
            href="#strength"
          >
            <%s! Icons.lightning "h-10 w-10 mb-4 m-auto mt-6" %>
            <div class="font-semibold text-lg text-content dark:text-dark-content">Strengths</div>
          </a>
        </div>
        <div>
          <a
            class="hover:text-primary dark:hover:text-dark-primary hover:bg-primary_25 dark:hover:bg-dark-primary_20 h-28 w-28 rounded-lg inline-block transition-colors"
            href="#history"
          >
            <%s! Icons.clock "h-10 w-10 mb-4 m-auto mt-6" %>
            <div class="font-semibold text-lg text-content dark:text-dark-content">History</div>
          </a>
        </div>
        <div>
          <a
            class="hover:text-primary dark:hover:text-dark-primary hover:bg-primary_25 dark:hover:bg-dark-primary_20 h-28 w-28 rounded-lg inline-block transition-colors"
            href="#Name"
          >
            <%s! Icons.features "h-10 w-10 mb-4 m-auto mt-6" %>
            <div class="font-semibold text-lg text-content dark:text-dark-content">Name</div>
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="bg-background dark:bg-dark-background">
  <div class="py-10 lg:py-28">
    <div class="container-fluid">
      <div class="prose dark:prose-invert lg:prose-lg mx-auto max-w-5xl">
        <h2 id="strength">Why Rocq?</h2>
        <div class="space-y-10">


          <P> 
            The Rocq prover implements a program specification and mathematical higher-level language called Gallina that is based on an expressive 
            formal language called the Calculus of Inductive Constructions that itself combines both a higher-order logic and a 
            richly-typed functional programming language. Through a vernacular language of commands, Rocq allows:
          </p>
          <ul>
            <li> to define functions or predicates, that can be evaluated efficiently;</li>
            <li> to state mathematical theorems and software specifications;</li>
            <li> to interactively develop formal proofs of these theorems;</li>
            <li> to machine-check these proofs by a relatively small certification "kernel";</li>
            <li> to extract certified programs to languages like OCaml, Haskell or Scheme.</li>
          </ul>

          <p>
            As a proof development system, the Rocq prover provides interactive proof methods, decision and semi-decision algorithms, 
            and a tactic language for letting the user define its own proof methods. 
            Connection with external computer algebra system or theorem provers is available.
          </p>

          <p>
            As a platform for the formalization of mathematics or the development of programs, 
            the Rocq prover provides support for high-level notations, implicit contents and various other useful kinds of macros.
          </p>
          <h2 id="history">A Brief History</h2>
          <p>
            The Rocq prover is the result of more than 40 years of research. It started in 1984 from an implementation of the Calculus of Constructions 
            at INRIA-Rocquencourt by Thierry Coquand and GÃ©rard Huet. In 1991, Christine Paulin extended it to the Calculus of Inductive Constructions. 
            All in all, more than 200 people have contributed to the development of Rocq.
          </p>
          <p>
            The <a href="<%s Url.governance %>">Rocq Team</a> is responsible for the development of
            Rocq and integration of contributions. See credits for a detailed list of contributors over the years, the history and 
            recent changes chapters in the Rocq Reference Manual for detailed information about changes in the system or the synthetic 
            <a href="https://coq.inria.fr/who-did-what-in-coq">who did what</a> table for an overview of the systems contributors.
          </p>
          <p>
            Rocq is written in OCaml. It is distributed under the <a href="http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html">GNU Lesser General Public Licence Version 2.1 (LGPL)</a>.
          </p>
          <h2 id="Name">An Overview of the Name's Evolution</h2>
          <p>
          The Rocq prover was formerly known as the Coq proof assistant. 
          The name "Coq" referenced the Calculus of Constructions (CoC), 
          the foundational system it is based on, as well as one of its creators, Thierry Coquand. 
          Additionally, it paid homage to the French national symbol, the rooster.
          </p>
          <p>
          The new name, "the Rocq prover," honors Inria Rocquencourt, the original site where the prover was developed. 
          It also alludes to the mythological bird Roc (or Rokh), symbolizing strength and not so disconnected to a rooster. 
          Furthermore, the name conveys a sense of solidity, and its unintended connection to music adds a pleasant resonance.
          </p>
<!--
          <h2 id="features">Additional Features</h2>
          <ul>
            <li>
              <strong>Certified Type Theory and Extraction:</strong>
              The Rocq prover is based on the formal verification of its type theory implementation and extraction system, 
              minimizing the trusted code base and increasing user confidence in results.
            </li>
            <li>
              <strong>Universe and Sort Polymorphism:</strong>
            </li>
            <li>
              <strong>Implicit Cumulativity:</strong>
            </li>
            <li>
              <strong>Definitional Proof Irrelevance:</strong>
            </li>
          </ul>
          -->
        </div>
      </div>
    </div>
  </div>
</div>
