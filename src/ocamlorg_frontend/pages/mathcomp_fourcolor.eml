let render =
<div class="alectryon-root alectryon-centered"><div class="document">
<pre class="alectryon-io highlight"><span class="alectryon-wsp"><span class="c">(* (c) Copyright 2006-2018 Microsoft Corporation and Inria.                  *)</span>
<span class="c">(* Distributed under the terms of CeCILL-B.                                  *)</span>
</span><span class="alectryon-sentence"><span class="alectryon-input"><span class="kn">From</span> fourcolor <span class="kn">Require Import</span> real realplane.</span><span class="alectryon-wsp">
</span></span><span class="alectryon-sentence"><input class="alectryon-toggle" id="fourcolor-v-chk0" style="display: none" type="checkbox"><label class="alectryon-input" for="fourcolor-v-chk0"><span class="kn">From</span> fourcolor <span class="kn">Require</span> combinatorial4ct discretize finitize.</label><small class="alectryon-output"><div><div class="alectryon-messages"><blockquote class="alectryon-message">[Loading ML file ssrmatching_plugin.cmxs (<span class="nb">using</span> legacy method) ... <span class="bp">done</span>]</blockquote><blockquote class="alectryon-message">[Loading ML file ssreflect_plugin.cmxs (<span class="nb">using</span> legacy method) ... <span class="bp">done</span>]</blockquote><blockquote class="alectryon-message">[Loading ML file ring_plugin.cmxs (<span class="nb">using</span> legacy method) ... <span class="bp">done</span>]</blockquote><blockquote class="alectryon-message">Serlib plugin: coq-elpi.elpi <span class="kr">is</span> not available: serlib support <span class="kr">is</span> missing.
Incremental checking <span class="kr">for</span> commands <span class="kr">in</span> this plugin will be impacted.</blockquote><blockquote class="alectryon-message">[Loading ML file coq-elpi.elpi ... <span class="bp">done</span>]</blockquote></div></div></small><span class="alectryon-wsp">
</span></span><span class="alectryon-wsp">
<span class="sd">(******************************************************************************)</span>
<span class="c">(*   This files contains the proof of the high-level statement of the Four    *)</span>
<span class="c">(* Color Theorem, whose statement uses only the elementary real topology      *)</span>
<span class="c">(* defined in libraries real and realplane. The theorem is stated for an      *)</span>
<span class="c">(* arbitrary model of the real line, which we show in separate libraries      *)</span>
<span class="c">(* (dedekind and realcategorical) is equivalent to assuming the classical     *)</span>
<span class="c">(* excluded middle axiom.                                                     *)</span>
<span class="c">(*   We only import the real and realplane libraries, which do not introduce  *)</span>
<span class="c">(* any extra-logical context, in particular no new notation, so that the      *)</span>
<span class="c">(* interpretation of the text below is as transparent as possible.            *)</span>
<span class="c">(*   Accordingly we use qualified names refer to the supporting result in the *)</span>
<span class="c">(* finitize, discretize and combinatorial4ct libraries, and do not rely on    *)</span>
<span class="c">(* the ssreflect extensions in the formulation of the final arguments.        *)</span>
<span class="sd">(******************************************************************************)</span>
</span><span class="alectryon-sentence"><span class="alectryon-input"><span class="kn">Section</span> <span class="nf">FourColorTheorem</span>.</span><span class="alectryon-wsp">
</span></span><span class="alectryon-wsp">
</span><span class="alectryon-sentence"><span class="alectryon-input"><span class="kn">Variable</span> <span class="nv">Rmodel</span> : Real.model.</span><span class="alectryon-wsp">
</span></span><span class="alectryon-sentence"><span class="alectryon-input"><span class="kn">Let</span> <span class="nf">R</span> := Real.model_structure Rmodel.</span><span class="alectryon-wsp">
</span></span><span class="alectryon-sentence"><span class="alectryon-input"><span class="kn">Implicit Type</span> <span class="nf">m</span> : map R.</span><span class="alectryon-wsp">
</span></span><span class="alectryon-wsp">
</span><span class="alectryon-sentence"><input class="alectryon-toggle" id="fourcolor-v-chk1" style="display: none" type="checkbox"><label class="alectryon-input" for="fourcolor-v-chk1"><span class="kn">Theorem</span> <span class="nf">four_color_finite</span> <span class="nv">m</span> : finite_simple_map m -&gt; colorable_with <span class="mi">4</span> m.</label><small class="alectryon-output"><div><div class="alectryon-goals"><blockquote class="alectryon-goal"><div class="goal-hyps"><span><var>Rmodel</var><span class="hyp-type"><b>: </b><span>Real.model</span></span></span><br><span><var>R</var><span><span class="hyp-body"><b>:= </b><span>Real.model_structure Rmodel</span></span><span class="hyp-type"><b>: </b><span>Real.structure</span></span></span></span><br><span><var>m</var><span class="hyp-type"><b>: </b><span>map R</span></span></span><br></div><span class="goal-separator"><hr></span><div class="goal-conclusion">finite_simple_map (R:=R) m -&gt;
colorable_with (R:=R) <span class="mi">4</span> m</div></blockquote></div></div></small><span class="alectryon-wsp">
</span></span><span class="alectryon-sentence"><input class="alectryon-toggle" id="fourcolor-v-chk2" style="display: none" type="checkbox"><label class="alectryon-input" for="fourcolor-v-chk2"><span class="kn">Proof</span>.</label><small class="alectryon-output"><div><div class="alectryon-goals"><blockquote class="alectryon-goal"><div class="goal-hyps"><span><var>Rmodel</var><span class="hyp-type"><b>: </b><span>Real.model</span></span></span><br><span><var>R</var><span><span class="hyp-body"><b>:= </b><span>Real.model_structure Rmodel</span></span><span class="hyp-type"><b>: </b><span>Real.structure</span></span></span></span><br><span><var>m</var><span class="hyp-type"><b>: </b><span>map R</span></span></span><br></div><span class="goal-separator"><hr></span><div class="goal-conclusion">finite_simple_map (R:=R) m -&gt;
colorable_with (R:=R) <span class="mi">4</span> m</div></blockquote></div></div></small><span class="alectryon-wsp">
</span></span><span class="alectryon-sentence"><input class="alectryon-toggle" id="fourcolor-v-chk3" style="display: none" type="checkbox"><label class="alectryon-input" for="fourcolor-v-chk3"><span class="nb">intros</span> fin_m.</label><small class="alectryon-output"><div><div class="alectryon-goals"><blockquote class="alectryon-goal"><div class="goal-hyps"><span><var>Rmodel</var><span class="hyp-type"><b>: </b><span>Real.model</span></span></span><br><span><var>R</var><span><span class="hyp-body"><b>:= </b><span>Real.model_structure Rmodel</span></span><span class="hyp-type"><b>: </b><span>Real.structure</span></span></span></span><br><span><var>m</var><span class="hyp-type"><b>: </b><span>map R</span></span></span><br><span><var>fin_m</var><span class="hyp-type"><b>: </b><span>finite_simple_map (R:=R) m</span></span></span><br></div><span class="goal-separator"><hr></span><div class="goal-conclusion">colorable_with (R:=R) <span class="mi">4</span> m</div></blockquote></div></div></small><span class="alectryon-wsp">
</span></span><span class="alectryon-sentence"><input class="alectryon-toggle" id="fourcolor-v-chk4" style="display: none" type="checkbox"><label class="alectryon-input" for="fourcolor-v-chk4"><span class="nb">pose proof</span> (discretize.discretize_to_hypermap fin_m) <span class="kr">as</span> [G planarG colG].</label><small class="alectryon-output"><div><div class="alectryon-goals"><blockquote class="alectryon-goal"><div class="goal-hyps"><span><var>Rmodel</var><span class="hyp-type"><b>: </b><span>Real.model</span></span></span><br><span><var>R</var><span><span class="hyp-body"><b>:= </b><span>Real.model_structure Rmodel</span></span><span class="hyp-type"><b>: </b><span>Real.structure</span></span></span></span><br><span><var>m</var><span class="hyp-type"><b>: </b><span>map R</span></span></span><br><span><var>fin_m</var><span class="hyp-type"><b>: </b><span>finite_simple_map (R:=R) m</span></span></span><br><span><var>G</var><span class="hyp-type"><b>: </b><span>hypermap.hypermap</span></span></span><br><span><var>planarG</var><span class="hyp-type"><b>: </b><span>geometry.planar_bridgeless G</span></span></span><br><span><var>colG</var><span class="hyp-type"><b>: </b><span>coloring.four_colorable G -&gt;
colorable_with (R:=Real.model_structure Rmodel)
  <span class="mi">4</span> m</span></span></span><br></div><span class="goal-separator"><hr></span><div class="goal-conclusion">colorable_with (R:=R) <span class="mi">4</span> m</div></blockquote></div></div></small><span class="alectryon-wsp">
</span></span><span class="alectryon-sentence"><span class="alectryon-input"><span class="bp">exact</span> (colG (combinatorial4ct.four_color_hypermap planarG)).</span><span class="alectryon-wsp">
</span></span><span class="alectryon-sentence"><span class="alectryon-input"><span class="kn">Qed</span>.</span><span class="alectryon-wsp">
</span></span><span class="alectryon-wsp">
</span><span class="alectryon-sentence"><input class="alectryon-toggle" id="fourcolor-v-chk5" style="display: none" type="checkbox"><label class="alectryon-input" for="fourcolor-v-chk5"><span class="kn">Theorem</span> <span class="nf">four_color</span> <span class="nv">m</span> : simple_map m -&gt; colorable_with <span class="mi">4</span> m.</label><small class="alectryon-output"><div><div class="alectryon-goals"><blockquote class="alectryon-goal"><div class="goal-hyps"><span><var>Rmodel</var><span class="hyp-type"><b>: </b><span>Real.model</span></span></span><br><span><var>R</var><span><span class="hyp-body"><b>:= </b><span>Real.model_structure Rmodel</span></span><span class="hyp-type"><b>: </b><span>Real.structure</span></span></span></span><br><span><var>m</var><span class="hyp-type"><b>: </b><span>map R</span></span></span><br></div><span class="goal-separator"><hr></span><div class="goal-conclusion">simple_map (R:=R) m -&gt; colorable_with (R:=R) <span class="mi">4</span> m</div></blockquote></div></div></small><span class="alectryon-wsp">
</span></span><span class="alectryon-sentence"><input class="alectryon-toggle" id="fourcolor-v-chk6" style="display: none" type="checkbox"><label class="alectryon-input" for="fourcolor-v-chk6"><span class="kn">Proof</span>.</label><small class="alectryon-output"><div><div class="alectryon-goals"><blockquote class="alectryon-goal"><div class="goal-hyps"><span><var>Rmodel</var><span class="hyp-type"><b>: </b><span>Real.model</span></span></span><br><span><var>R</var><span><span class="hyp-body"><b>:= </b><span>Real.model_structure Rmodel</span></span><span class="hyp-type"><b>: </b><span>Real.structure</span></span></span></span><br><span><var>m</var><span class="hyp-type"><b>: </b><span>map R</span></span></span><br></div><span class="goal-separator"><hr></span><div class="goal-conclusion">simple_map (R:=R) m -&gt; colorable_with (R:=R) <span class="mi">4</span> m</div></blockquote></div></div></small><span class="alectryon-wsp"> </span></span><span class="alectryon-sentence"><span class="alectryon-input"><span class="nb">revert</span> m; <span class="bp">exact</span> (finitize.compactness_extension four_color_finite).</span><span class="alectryon-wsp"> </span></span><span class="alectryon-sentence"><span class="alectryon-input"><span class="kn">Qed</span>.</span><span class="alectryon-wsp">
</span></span><span class="alectryon-wsp">
</span><span class="alectryon-sentence"><span class="alectryon-input"><span class="kn">End</span> <span class="nf">FourColorTheorem</span>.</span></span></pre>
</div></div>