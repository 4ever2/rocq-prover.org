let render () =
Layout.render
~title:"Why Rocq?"
~description:"Rocq is a mature, dependently-typed functional programming language and interactive theorem prover. Learn more about what makes it unique."
~canonical:Url.about @@
<div class="lg:-mt-32 lg:pt-44 intro-section-simple dark:dark-intro-section-simple">
  <div class="container-fluid">
    <div class="text-center w-full lg:w-2/3 m-auto">
      <h1 class="font-bold mb-6 text-title dark:text-dark-title">Why Rocq?</h1>
      <div class="flex items-center justify-center space-x-8 mt-11 lg:space-x-24">
        <div>
          <a
            class="hover:text-primary dark:hover:text-dark-primary hover:bg-primary_25 dark:hover:bg-dark-primary_20 rounded-lg h-28 w-28 inline-block transition-colors"
            href="#strengths"
          >
            <%s! Icons.lightning "h-10 w-10 mb-4 m-auto mt-6" %>
            <div class="font-semibold text-lg text-content dark:text-dark-content">Strengths</div>
          </a>
        </div>
        <div>
          <a
            class="hover:text-primary dark:hover:text-dark-primary hover:bg-primary_25 dark:hover:bg-dark-primary_20 h-28 w-28 rounded-lg inline-block transition-colors"
            href="#features"
          >
            <%s! Icons.features "h-10 w-10 mb-4 m-auto mt-6" %>
            <div class="font-semibold text-lg text-content dark:text-dark-content">Features</div>
          </a>
        </div>
      </div>
    </div>
  </div>
</div>

<div class="bg-background dark:bg-dark-background">
  <div class="py-10 lg:py-28">
    <div class="container-fluid">
      <div class="prose dark:prose-invert lg:prose-lg mx-auto max-w-5xl">
        <h2 id="strengths">Strengths</h2>
        <div class="space-y-10">
          <p> 
            The Rocq Prover follows from over 40 years of research in Dependent Type Theory and Interactive Theorem Proving.
            ...
          </p>
        </div>
        <h2 id="features">Features</h2>
        <div class="space-y-10">
          <ul>
            <li>
              <strong>Certified Type Theory and Extraction:</strong>
              The Rocq prover is based on the formal verification of its type theory implementation and extraction system, 
              minimizing the trusted code base and increasing user confidence in results.
            </li>
            <li>
              <strong>Universe and Sort Polymorphism:</strong>
            </li>
            <li>
              <strong>Implicit Cumulativity:</strong>
            </li>
            <li>
              <strong>Definitional Proof Irrelevance:</strong>
            </li>
            <li>
              <strong>Efficient Definitional Equality Checkers:</strong>
            </li>
            <li>
              <strong>Metaprogramming Languages</strong>
              <p class="my-4 font-normal text-lg text-content dark:text-dark-content">                
                The built-in Ltac2 typed tactic programming language enables 
                the design of predictable and comfortable automation for proofs at a high-level of 
                abstraction, with native handling of the proof state and backtracking.
              </p>
              <p class="my-4 font-normal text-lg text-content dark:text-dark-content">
                As part of the Rocq Platform, two alternative languages are available:
                <ul>
                  <li>
                    A low level of abstraction is provided by the MetaRocq project which uses Rocq itself 
                    as the metaprogramming language. It allows directly working with the core term syntax 
                    and prove meta-theorems on the typing judgments of Rocq inside Rocq.
                  </li>
                  <li>
                    An alternative high-level language is provided by Rocq-Elpi, 
                    which interfaces Rocq with Î»-prolog, a logic programming language allowing to naturally 
                    express proof-search, unification and elaboration problems. Rocq-Elpi is at the core of 
                    Hierarchy-Builder, a metaprogramming tool that allows the effective development of 
                    hierarchies of structures in Rocq in an entirely declarative fashion. It handles in 
                    particular all structures used in the Mathematical Components libraries.
                  </li>
                </ul>
              </p>
            </li>
          </ul>
        </div>

        <h2 id="features">Future</h2>
        <div class="space-y-10">
          See our <a href="/roadmap">roadmap</a> for upcoming developments improving the Rocq Prover and Platform.
        </div>
      </div>
    </div>
  </div>
</div>
